name: CI/CD Pipeline

# Triggers the workflow on push to main branch and pull requests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Environment variables (no secrets needed for basic build)
env:
  NODE_VERSION: '18'
  CACHE_KEY: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

jobs:
  # Build and test job
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      # Step 2: Setup Node.js environment
      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      # Step 3: Cache dependencies for faster builds
      - name: 📦 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      # Step 4: Install dependencies
      - name: 📥 Install Dependencies
        run: npm ci
        
      # Step 5: Run linting (if available)
      - name: 🔍 Run Linting
        run: npm run lint --if-present
        continue-on-error: true
        
      # Step 6: Build the project
      - name: 🏗️ Build Project
        run: npm run build
        
      # Step 7: Upload build artifacts
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # Deployment job (only runs on main branch)
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      # Step 1: Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      # Step 2: Setup Node.js
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      # Step 3: Install dependencies
      - name: 📥 Install Dependencies
        run: npm ci
        
      # Step 4: Build for production
      - name: 🏗️ Build for Production
        run: npm run build
        
      # Step 5: Deploy to Vercel
      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # Optional: Preview deployment for PRs
  preview:
    name: Preview Deployment
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      # Step 1: Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      # Step 2: Setup Node.js
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      # Step 3: Install dependencies
      - name: 📥 Install Dependencies
        run: npm ci
        
      # Step 4: Build
      - name: 🏗️ Build
        run: npm run build
        
      # Step 5: Deploy Preview
      - name: 🚀 Deploy Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: ''
